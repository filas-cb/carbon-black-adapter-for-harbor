/*
 * Copyright 2021 VMware, Inc.
 * SPDX-License-Identifier: Apache-2.0
 */
 
package harbor

import (
	"strings"
)

type Severity string

const (
	UNKNOWN    Severity = "Unknown"
	NEGLIGIBLE Severity = "Negligible"
	LOW        Severity = "Low"
	MEDIUM     Severity = "Medium"
	HIGH       Severity = "High"
	CRITICAL   Severity = "Critical"
)

func ToHarborSeverity(sev string) Severity {
	switch strings.ToLower(sev) {
	case "critical":
		return CRITICAL
	case "high":
		return HIGH
	case "medium":
		return MEDIUM
	case "low":
		return LOW
	case "negligible":
		return NEGLIGIBLE
	case "unknown":
		fallthrough
	default:
		return UNKNOWN
	}
}

func MaxSeverity(sev1 Severity, sev2 Severity) Severity {
	level := map[Severity]int{
		UNKNOWN:    0,
		NEGLIGIBLE: 1,
		LOW:        2,
		MEDIUM:     3,
		HIGH:       4,
		CRITICAL:   5,
	}

	if level[sev1] > level[sev2] {
		return sev1
	}

	return sev2
}

type VulnerabilityItem struct {
	// The unique identifier of the vulnerability.
	ID string `json:"id,omitempty"`
	// An operating system package containing the vulnerability.
	Package string `json:"package,omitempty"`
	// The version of the package containing the vulnerability.
	Version string `json:"version,omitempty"`
	// The version of the package containing the fix if available.
	FixVersion string   `json:"fix_version,omitempty"`
	Severity   Severity `json:"severity,omitempty"`
	// The detailed description of the vulnerability.
	Description string `json:"description,omitempty"`
	// The list of links to the upstream databases with the full description of the vulnerability.
	Links []string `json:"links,omitempty"`
}
